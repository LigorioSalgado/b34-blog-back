scalar EmailAddress
scalar URL

type Query {
    getAuthors:[Author]!
    getSingleAuthor(id:ID!):Author!
    getPosts:[Post]!
    getOnePost(id:ID!):Post!
}

type Mutation{
    createNewAuthor(data:AuthorInput!):Author!
    updateOneAuthor(id:ID!,data:AuthorUpdateInput!):Author!
    deleteOneAuthor(id:ID!):String!
    createNewPost(data:PostInput!):Post!
    updateOnePost(id:ID!,data:PostUpdateInput!):Post!
    deleteOnePost(id:ID!):String!
}

type Post{
    _id:ID!
    title:String!
    content:String!
    author:Author! #Aqui regresa todo el objeto
    cover:URL!    
    liked_by:[Author]!
}

input PostInput {
    title:String!
    content:String!
    author:String! #Aqui solo va el ID
    cover:URL
}

input PostUpdateInput{
    title:String
    content:String
    cover:URL
    liked_by:String
    is_active:Boolean
}

type Author{
    _id:ID!
    first_name:String!
    last_name:String!
    email:EmailAddress!
    birth_date:String!
    gender:GENDERS
    profile_pic:URL!
    posts:[Post]!
}

input AuthorInput {
    first_name:String!
    last_name:String!
    email:EmailAddress!
    password:String
    birth_date:String
    gender:GENDERS
    profile_pic:String
}

input AuthorUpdateInput {
    first_name:String
    last_name:String
    email:EmailAddress
    password:String
    birth_date:String
    gender:GENDERS
    profile_pic:String
    is_active:Boolean
}

enum GENDERS {
    M
    F
    O
}
